services:
  # Spark Master Node
  spark-master:
    container_name: spark-master-2
    hostname: spark-master
    build:
      context: .
      dockerfile: Dockerfile.spark
    command: bin/spark-class org.apache.spark.deploy.master.Master
    volumes:
      - ./config:/opt/bitnami/spark/config
      - ./jobs:/opt/bitnami/spark/jobs
      - ./datasets:/opt/bitnami/spark/datasets
      - ./requirements.txt:/opt/bitnami/spark/requirements.txt
    ports:
      - "7077:7077"
      - "9090:8080"
    networks:
      - kafka-network-2

  # Spark Worker Node
  spark-worker: &worker
    container_name: spark-worker-2
    hostname: spark-worker
    build:
      context: .
      dockerfile: Dockerfile.spark
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    volumes:
      - ./config:/opt/bitnami/spark/config
      - ./jobs:/opt/bitnami/spark/jobs
      - ./datasets:/opt/bitnami/spark/datasets
      - ./requirements.txt:/opt/bitnami/spark/requirements.txt
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_MEMORY: 1G
      SPARK_WORKER_CORES: 2
    networks:
      - kafka-network-2

  # spark-worker-2:
  #   <<: *worker

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper-2
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 10s
    networks:
      - kafka-network-2

  broker:
    image: confluentinc/cp-kafka:latest
    restart: always
    hostname: broker
    container_name: broker-2
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-2:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://broker-2:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-2:29092,PLAINTEXT_HOST://broker-2:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CREATE_TOPICS: "movie_review:1:1"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 10s
    networks:
      - kafka-network-2

  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    hostname: control-center
    container_name: control-center-2
    ports:
      - "9021:9021"
    depends_on:
      broker:
        condition: service_healthy
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: broker-2:29092
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONFLUENT_METRICS_ENABLE: "true"
      PORT: 9021
    networks:
      - kafka-network-2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9021/health"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 10s  

networks:
  kafka-network-2:
    name: kafka-network-2
    driver: bridge
